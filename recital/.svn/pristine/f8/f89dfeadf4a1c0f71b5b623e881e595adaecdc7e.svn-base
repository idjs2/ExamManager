package kr.or.ddit.controller.student;

import java.security.Principal;
import java.util.List;
import java.util.stream.Collectors;

import javax.inject.Inject;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import kr.or.ddit.service.common.IFileService;
import kr.or.ddit.service.student.inter.IStuCertificationService;
import kr.or.ddit.vo.CertificationVO;
import kr.or.ddit.vo.PaginationInfoVO;
import lombok.extern.slf4j.Slf4j;

@Controller
@Slf4j
@RequestMapping("/student")
public class StuCertificationController {

	@Inject
	private IStuCertificationService service;

	@Inject
	private IFileService fileService;

	// 증명서 종류 출력
	@RequestMapping(value = "/certificationList", method = RequestMethod.GET)
	public String certificationList(@RequestParam(name = "page", required = false, defaultValue = "1") int currentPage,
			@RequestParam(required = false, defaultValue = "99") String searchType, Model model) {
		log.info("증명서 종류 리스트 출력 메서드 ");

		PaginationInfoVO<CertificationVO> pagingVO = new PaginationInfoVO<CertificationVO>();

		// 총 4가지의 필드 설정하기 위해서
		// 현제 페이지를 전달 후, start/endRow, start/endPage 설정
		pagingVO.setCurrentPage(currentPage);
		pagingVO.setSearchType(searchType);
		// pagingVO.setSearchWord("test"); // 검색 기능 추가시 바뀌어야할 부분

		// 총 게시글 수를 얻어온다.
		int totalRecord = service.selectCertificationCount(pagingVO);

		// 총 게시글 수 전달 후, 총 페이지 수를 설정
		pagingVO.setTotalRecord(totalRecord);
		List<CertificationVO> dataList = service.selectCertificationList(pagingVO);
		log.info("pagingVO searchType >> " + pagingVO.getSearchType());
		for (CertificationVO d : dataList)
			log.info("dataList >> " + d.toString());
		pagingVO.setDataList(dataList);
		// 총 게시글 수가 포함된 PaginationInfoVO 객체를 넘겨주고 1페이지에 해당하는 10개(screenSize)의
		// 게시글을 얻어온다. (dataList)

		model.addAttribute("searchType", searchType);
		model.addAttribute("pagingVO", pagingVO);
		return "sum/student/certification/certificationList";
	}

	// 증명서 발급
	@RequestMapping(value="/certificationPrint", method=RequestMethod.POST)
	public String certificationPrint() {
		// 여기서 카카오API이용하는 로직 추가하면 됨
		return "";
	}
	
	
	 // 본인이 발급받은 증명서 내역 조회
    @RequestMapping(value = "/myCertificationList", method = RequestMethod.GET)
    public String myCertificationList(Model model, 
                                      @RequestParam(required = false) String searchName,
                                      Principal principal) {
        log.info("본인이 발급받은 증명서 내역 조회...!");

        String stuNo = principal.getName();
        log.info("로그인한 userId : " + stuNo);
        
        List<CertificationVO> certificationList = service.myCertificationList(stuNo);	// 내가 발급받은 증명서들
        
        // 검색 기능 추가
        if (searchName != null && !searchName.isEmpty()) {
            certificationList = certificationList.stream()
                                                 .filter(c -> c.getCerName().toLowerCase().contains(searchName.toLowerCase()))
                                                 .collect(Collectors.toList());
        }
        
        model.addAttribute("certificationList", certificationList);
        model.addAttribute("searchName", searchName);
        
        return "sum/student/certification/myCertificationList";
    }
	
	
	
	
	
	
	
	

}
