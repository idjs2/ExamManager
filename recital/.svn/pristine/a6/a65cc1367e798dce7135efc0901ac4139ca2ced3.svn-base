package kr.or.ddit.controller.common;

import javax.annotation.PostConstruct;
import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import kr.or.ddit.service.common.IUserLoginService;
import kr.or.ddit.vo.ProfessorVO;
import kr.or.ddit.vo.UserVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/common")
public class CommonLoginController {

    @Autowired
    private IUserLoginService iUserLoginService;

    @Inject
    PasswordEncoder pw;
    
    @PostConstruct
    public void init() {
    	log.info("###### " + pw.encode("1234"));
    	
    }
    
    // 메인페이지(테스트용)
    @RequestMapping(value = "/home", method = RequestMethod.GET)
    public String home() {
        return "common/home";
    }

    // 로그인폼 띄워주는 페이지
    @RequestMapping(value = "/login", method = RequestMethod.GET)
    public String loginPage() {
        return "common/login";
    }

    // 로그아웃 처리
    @RequestMapping(value = "/logout", method = RequestMethod.GET)
    public String logout(HttpServletRequest request, HttpServletResponse response) {
        HttpSession session = request.getSession(false);
        if (session != null) {
            session.invalidate();
        }
        return "redirect:/common/home";
    }

    // 아이디, 비밀번호 찾기 페이지 이동용
    @RequestMapping(value = "/findIdPw", method = RequestMethod.GET)
    public String findIdPw() {
        return "common/findIdPw";
    }

    // 이름 꺼내오는 기능
    @RequestMapping("/main")
    public String mypage(HttpSession session, Model model, String userId) {
        userId = (String) session.getAttribute("userId");
        if (userId != null) { // 아이디가 있다면 그 아이디를 DB의 모든 데이터에서 조회
        	
        	// 모~든 회원 정보 중에서 검색
        	// 아이디가 일치하는 해당 회원의 정보를 꺼내와야함.

            // userId를 이용해 데이터베이스에서 username 조회
        	// ????????????????????? 어떻게 처리?
            
        	//UserVO user = iUserLoginService.findByUserNo(userId);
        	
        	ProfessorVO professor = iUserLoginService.professorInfo(userId);
        	
            model.addAttribute("username", professor.getProNo());
            
            log.info("#################데이터 테스트##############");
            log.info("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
            log.info("로그인 한 아이디 = " + userId);
            log.info("정보1 : " + professor.getProEmail());
            log.info("정보2 : " + professor.getDeptNo());
            log.info("정보3 : " + professor.getComDetGNo());
            log.info("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
            
        }
        
        return "mypage";
    }
    
    
    
    //----------------DB에 있는 데이터들을 어떤 방법으로 뒤질 수 있음?
    // 학번/사번 찾기
    
    
    // 비밀번호 찾기
}
