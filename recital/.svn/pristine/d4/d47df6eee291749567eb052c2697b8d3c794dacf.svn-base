package kr.or.ddit.controller.common;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import kr.or.ddit.service.common.IUserLoginService;
import kr.or.ddit.vo.BoardVO;
import kr.or.ddit.vo.ProfessorVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/common")
public class CommonLoginController {

    @Inject
    private IUserLoginService iUserLoginService;

    @Inject
    private PasswordEncoder passwordEncoder;

    
    @PostConstruct
    public void init() {
        log.info("###### Initialized with Password Encoder");
    }

    // 메인페이지
    @RequestMapping(value = "/home", method = RequestMethod.GET)
    public String home(Model model) {
    	List<BoardVO> boardList = iUserLoginService.selectNotice();
    	List<BoardVO> resultBoard = new ArrayList<BoardVO>();
    	for (int i = 0; i < 4; i++) {
			resultBoard.add(boardList.get(i));    		
		}
    	model.addAttribute("resultBoard", resultBoard);
    	
        return "common/home";
    }

    // 로그인폼 띄워주는 페이지
    @RequestMapping(value = "/login", method = RequestMethod.GET)
    public String loginPage() {
        return "common/login";
    }

    // 이름 꺼내오는 기능
    @RequestMapping("/main")
    public String mypage(HttpSession session, Model model, String userId) {
        userId = (String) session.getAttribute("userId");
        if (userId != null) {
            ProfessorVO professor = iUserLoginService.professorInfo(userId);
            model.addAttribute("username", professor.getProNo());
            log.info("#################데이터 테스트##############");
            log.info("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
            log.info("로그인 한 아이디 = " + userId);
            log.info("정보1 : " + professor.getProEmail());
            log.info("정보2 : " + professor.getDeptNo());
            log.info("정보3 : " + professor.getComDetGNo());
            log.info("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
        }
        return "mypage";
    }

    // 로그아웃 처리
    @RequestMapping(value = "/logout", method = RequestMethod.GET)
    public String logout(HttpServletRequest request, HttpServletResponse response) {
        HttpSession session = request.getSession(false);
        if (session != null) {
            session.invalidate();
        }
        return "redirect:/common/home";
    }

    //--------------------------------------아이디, 비밀번호 찾기--------------------------------------
    // 아이디, 비밀번호 찾기 페이지 이동용
    @RequestMapping(value = "/findIdPw", method = RequestMethod.GET)
    public String findIdPw() {
        return "common/findIdPw";
    }

    // 아이디 찾기
    @RequestMapping(value = "/findId", method = RequestMethod.POST)
    public String findId(@RequestParam("userType") String userType,
                         @RequestParam("userName") String userName,
                         @RequestParam("userBirth") String userBirth,
                         @RequestParam("userEmail") String userEmail,
                         Model model) {

        log.info("userType : " + userType);

        String userId = "";
        if ("student".equals(userType)) {
            userId = iUserLoginService.findIdByStudentDetails(userName, userBirth, userEmail);
        } else if ("professor".equals(userType)) {
            userId = iUserLoginService.findIdByProfessorDetails(userName, userBirth, userEmail);
        } else if ("admin".equals(userType)) {
            userId = iUserLoginService.findIdByAdminDetails(userName, userBirth, userEmail);
        }

        if (userId != null) {
            model.addAttribute("message", "회원님의 아이디는 " + userId + "입니다.");
        } else {
            model.addAttribute("message", "일치하는 정보가 없습니다.");
        }

        return "common/findIdResult"; // findIdResult.jsp로 이동
    }

    // 비밀번호 재설정을 위해 입력 데이터에 일치하는 데이터가 DB에 있는지를 확인
    @RequestMapping(value = "/findPw", method = RequestMethod.POST)
    public String findPw(@RequestParam("userType") String userType,
                         @RequestParam("userId") String userId,
                         @RequestParam("userBirth") String userBirth,
                         @RequestParam("userEmail") String userEmail,
                         Model model) {

        log.info("userType : " + userType);

        boolean exists = false;	// 조회한 데이터가 존재하는지 검증
        
        if ("student".equals(userType)) {
            exists = iUserLoginService.checkStudentDetails(userId, userBirth, userEmail);
        } else if ("professor".equals(userType)) {
            exists = iUserLoginService.checkProfessorDetails(userId, userBirth, userEmail);
        } else if ("admin".equals(userType)) {
            exists = iUserLoginService.checkAdminDetails(userId, userBirth, userEmail);
        }

        if (exists) {
            model.addAttribute("userId", userId);
            model.addAttribute("userType", userType);
            return "common/resetPw"; 
        } else {
            model.addAttribute("message", "일치하는 정보가 없습니다.");
            return "common/findIdResult";
        }
    }

    // 비밀번호 재설정 (공통)
    @RequestMapping(value = "/resetPassword", method = RequestMethod.POST)
    public String resetPassword(@RequestParam("userId") String userId,
                                @RequestParam("newPassword") String newPassword,
                                Model model) {
        String encodedPassword = passwordEncoder.encode(newPassword);
        int success = iUserLoginService.resetPw(userId, encodedPassword);

        if (success > 0) {
            model.addAttribute("message", "비밀번호가 성공적으로 변경되었습니다.");
        } else {
            model.addAttribute("message", "비밀번호 변경에 실패했습니다. 다시 시도해주세요.");
        }

        return "common/resetPwResult"; 
    }
}
